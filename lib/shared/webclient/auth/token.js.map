{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../src/shared/webclient/auth/token.ts"],"names":[],"mappings":";;;AAEA,MAAsB,SAAS;IAM9B;QALO,WAAM,GAAW,IAAI,CAAC;QACtB,YAAO,GAAS,IAAI,CAAC;QAElB,oBAAe,GAAiB,IAAI,CAAC;QAG9C,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;IAC3D,CAAC;IAEM,OAAO,CAAC,EAAE,YAAY,EAAE,UAAU,EAAiB;QACzD,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;QAE3B,IAAI,gBAAgB,GAAG,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjD,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,GAAG,UAAU,GAAG,gBAAgB,CAAC,CAAC;QAE7D,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QAEjB,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;IAKO,aAAa;QACpB,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE;YAClC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC5B;IACF,CAAC;IAEO,cAAc;QACrB,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;YAC1B,IAAI,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAElE,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,IAAI,KAAK,GAAG,CAAC,EAAE;gBACd,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,GAAG,EAAE;oBACtC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtB,CAAC,EAAE,KAAK,CAAC,CAAC;aACV;iBACI;gBACJ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACrB;SACD;IACF,CAAC;CACD;AArDD,8BAqDC","sourcesContent":["import { IWrappedToken, IAuthToken } from '../contracts/index';\n\nexport abstract class AuthToken implements IAuthToken {\n\tpublic access: string = null;\n\tpublic expires: Date = null;\n\n\tprotected expiryTimeoutID: NodeJS.Timer = null;\n\n\tconstructor() {\n\t\tthis.startCountdown();\n\t}\n\n\tpublic get isValid() {\n\t\treturn this.access !== null && this.expires >= new Date();\n\t}\n\n\tpublic refresh({ access_token, expires_in }: IWrappedToken) {\n\t\tthis.access = access_token;\n\n\t\tlet minExpirySeconds = expires_in >= 30 ? 30 : 0;\n\n\t\tlet t = new Date();\n\t\tt.setSeconds(t.getSeconds() + expires_in - minExpirySeconds); // eg 30sec early\n\n\t\tthis.expires = t;\n\n\t\tthis.startCountdown();\n\t}\n\n \tprotected abstract emit(event: string | symbol, ...args: Array<any>): boolean;\n\tprotected abstract on(event: string | symbol, listener: Function): this;\n\n\tprivate stopCountdown() {\n\t\tif (this.expiryTimeoutID !== null) {\n\t\t\tclearTimeout(this.expiryTimeoutID);\n\t\t\tthis.expiryTimeoutID = null;\n\t\t}\n\t}\n\n\tprivate startCountdown() {\n\t\tif (this.expires !== null) {\n\t\t\tlet delay: number = this.expires.getTime() - new Date().getTime();\n\n\t\t\tthis.stopCountdown();\n\n\t\t\tif (delay > 0) {\n\t\t\t\tthis.expiryTimeoutID = setTimeout(() => {\n\t\t\t\t\tthis.emit('expired');\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.emit('expired');\n\t\t\t}\n\t\t}\n\t}\n}\n"]}