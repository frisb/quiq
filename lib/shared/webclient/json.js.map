{"version":3,"file":"json.js","sourceRoot":"","sources":["../../../src/shared/webclient/json.ts"],"names":[],"mappings":";;;;;;;;;;AACA,yCAA+C;AAE/C,uBAA8B,OAAwB;IACrD,qBAA8B,OAAwB;;YACrD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;gBACpB,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;YAEtB,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC;YAErD,IAAI,QAAQ,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;YACtC,QAAQ,CAAC,IAAI,GAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC;QACjB,CAAC;KAAA;IAED,MAAM,CAAC,mBAAoB,SAAQ,4BAAiB,CAAC,WAAW,CAAC;QACnD,GAAG,CAAI,GAAW,EAAE,OAAyB;;gBACzD,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5D,CAAC;SAAA;QAEY,IAAI,CAAI,GAAW,EAAE,IAAS,EAAE,OAAyB;;gBACrE,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YACnE,CAAC;SAAA;QAEY,GAAG,CAAI,GAAW,EAAE,IAAS,EAAE,OAAyB;;gBACpE,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAClE,CAAC;SAAA;QAEY,MAAM,CAAI,GAAW,EAAE,OAAyB;;gBAC5D,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;YAC/D,CAAC;SAAA;KACD,CAAA;AACF,CAAC;AA7BD,sCA6BC","sourcesContent":["import { IRequestHeaders, RequestFunction, IRequestOptions, IResponse, IJsonWebClient } from './contracts/index';\nimport { AbstractWebClient } from './abstract';\n\nexport function JsonWebClient(request: RequestFunction) {\n\tasync function jsonRequest<T>(options: IRequestOptions): Promise<IResponse<T>> {\n\t\tif (!options.headers)\n\t\t\toptions.headers = {};\n\n\t\toptions.headers['Content-Type'] = 'application/json';\n\n\t\tlet response = await request(options);\n\t\tresponse.data = <T>JSON.parse(response.data);\n\t\treturn response;\n\t}\n\n\treturn class JsonWebClient extends AbstractWebClient(jsonRequest) implements IJsonWebClient {\n\t\tpublic async get<T>(url: string, headers?: IRequestHeaders): Promise<IResponse<T>> {\n\t\t\treturn await this.request({ method: 'GET', url, headers });\n\t\t}\n\n\t\tpublic async post<T>(url: string, body: any, headers?: IRequestHeaders): Promise<IResponse<T>> {\n\t\t\treturn await this.request({ method: 'POST', url, body, headers });\n\t\t}\n\n\t\tpublic async put<T>(url: string, body: any, headers?: IRequestHeaders): Promise<IResponse<T>> {\n\t\t\treturn await this.request({ method: 'PUT', url, body, headers });\n\t\t}\n\n\t\tpublic async delete<T>(url: string, headers?: IRequestHeaders): Promise<IResponse<T>> {\n\t\t\treturn await this.request({ method: 'DELETE', url, headers });\n\t\t}\n\t}\n}"]}