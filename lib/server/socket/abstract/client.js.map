{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../src/server/socket/abstract/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { IWSSocket, IClient, ISession, IEnvelope, Message } from '../contracts';\nimport { AbstractConnection } from './connection';\nimport { Writeln } from 'writeln';\nimport { IncomingMessage } from 'http';\n\nconst logger = new Writeln('Client');\n\nexport abstract class AbstractClient<TSession extends ISession>\nextends AbstractConnection<TSession>\nimplements IClient {\n  public constructor (public socket: IWSSocket, request: IncomingMessage) {\n    super();\n\n    socket\n      .on('message', (payload: string) => {\n        logger.debug('payload', payload);\n\n        try {\n          let envelope = this.parseEnvelope(payload);\n          let eventName = this.getEventName(envelope);\n          let message = this.parseMessage(envelope);\n          let handlerName = transformer(eventName);\n          let handler = this[handlerName];\n\n          // let key = chalk.dim(`${ipv4}-${ID}`);\n          // logger.debug(`${ key } > ${ method } ${ url }`, body);\n\n          if (handler) {\n            try {\n              let response = handler.call(this, message);\n\n              if (response)\n                this.send(response);\n            }\n            catch (err) {\n              this.error(400, err.message, err);\n            }\n          }\n          else {\n            logger.error(`Client does not implement \"${ handlerName }\" handler.`);\n          }\n        }\n        catch (e) {\n          this.error(400, 'Bad Request', e);\n        }\n      })\n      .on('close', (code: number, message: string) => {\n        logger.debug(`Socket closed ${ code } ${ message }`);\n        this.emit('close', code, message);\n      });\n\n    logger.debug('upgrade request url', request.url);\n  }\n\n  public get isInitialized() {\n  \treturn this.socket !== null;\n  }\n\n  public close() {\n    if (this.socket !== null) {\n\t    (<any> this.socket).terminate();\n\t    this.socket = null;\n\n\t    super.close();\n    }\n  }\n\n  public async send(payloadOrPromise: any): Promise<{}> {\n    return new Promise((resolve, reject) => {\n      try {\n        if (payloadOrPromise.then instanceof Function) {\n          payloadOrPromise\n            .then((payload: any) => this.sendSync(payload))\n            .then(resolve)\n            .catch(reject);\n        }\n        else {\n          this.sendSync(payloadOrPromise);\n          resolve();\n        }\n      }\n      catch(err) {\n        reject(err);\n      }\n    });\n  }\n\n  public error(code: number, message: string, error?: Error) {\n\t\tthis.send({\n      error: {\n        code,\n        message\n      }\n    });\n\n\t\tlogger.error(`${code} ${message}`, error);\n\t};\n\n  public abstract parseEnvelope(payload: string): IEnvelope<any>;\n\n  public abstract parseMessage(envelope: IEnvelope<any>): Message<any>;\n\n  public abstract getEventName(message: any): string;\n\n  private sendSync(payload: any): void {\n    logger.debug('send', payload);\n\n    try {\n      this.socket.send(JSON.stringify(payload));\n    }\n    catch (err) {\n      logger.error(err.message, err);\n    }\n  }\n}\n\nfunction transformer(eventName: string): string {\n\tlet fnName = upperFirst(eventName);\n\n\tif (fnName.indexOf(':') > -1) {\n\t\tlet words = fnName.split(':');\n\t\tfnName = '';\n\n\t\tfor (let i = 0, { length } = words; i < length; i++) {\n\t\t\tlet word = words[i];\n\n\t\t\tfnName += (i === 0 ? word : upperFirst(word));\n\t\t}\n\t}\n\n\treturn `on${ fnName }`;\n}\n\nfunction upperFirst(word: string): string {\n\t\tlet str = '';\n\n\t\tfor (let i = 0, { length } = word; i < length; i++) {\n\t\t\tlet char = word.charAt(i);\n\n\t\t\tif (i === 0)\n\t\t\t\tchar = char.toUpperCase();\n\n\t\t\tstr += char;\n\t\t}\n\n\t\treturn str;\n}\n"]}