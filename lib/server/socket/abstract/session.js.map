{"version":3,"file":"session.js","sourceRoot":"","sources":["../../../../src/server/socket/abstract/session.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { ISession } from '../contracts';\nimport { AbstractClient } from './client';\nimport { AbstractGateway } from './gateway';\nimport { generateID } from '../../idgenerator';\n\nexport abstract class AbstractSession<TSession extends AbstractSession<TSession, TClient, TGateway>, TClient extends AbstractClient<TSession, any>, TGateway extends AbstractGateway<TSession>>\nextends EventEmitter\nimplements ISession {\n\tpublic static add(session: ISession): void {\n\t\tthis.cache[session.ID] = session;\n\t}\n\n\tpublic static get<S extends AbstractSession<S, C, G>, C extends AbstractClient<S, any>, G extends AbstractGateway<S>>(id: string): AbstractSession<S, C, G> {\n\t\treturn <S> this.cache[id];\n\t}\n\n\t// public static createInstance<S extends Session<S, C, G>, C extends Client<S>, G extends Gateway<S>>(SessionType: { new(c: C, g: G): S }, client: C, gateway?: G): Session<S, C, G> {\n\t// \treturn new SessionType(client, gateway);\n\t// }\n\n\tpublic static remove(id: string): void {\n\t\tthis.cache[id] = null;\n\t\tdelete this.cache[id];\n\t}\n\n\tprivate static cache: { [id: string]: ISession; } = {};\n\n\tpublic ID: string;\n\n\tprivate _client: TClient = null;\n\tprivate _gateway: TGateway = null;\n\tprivate _backgroundTimerID: NodeJS.Timer = null;\n\n\tpublic get client(): TClient {\n\t\treturn this._client;\n\t}\n\n\tpublic set client(val: TClient) {\n\t\tif (val !== null) {\n\t\t\tthis._client = val;\n\n\t\t\tthis._client.on('close', (code: number, message: string) => {\n\t\t\t\tthis.client = null;\n\n\t\t\t\tlet min = this.backgroundMins;\n\n\t\t\t\tif (min > 0) {\n\t\t\t\t\tthis._backgroundTimerID = setTimeout(() => this.end(code, message), min * 60 * 1000);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.end(code, message);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this._backgroundTimerID !== null) {\n\t\t\t\tclearTimeout(this._backgroundTimerID);\n\t\t\t\tthis._backgroundTimerID = null;\n\t\t\t}\n\n\t\t\tthis._client.init(this);\n\t\t}\n\t}\n\n\tpublic get gateway(): TGateway {\n\t\treturn this._gateway;\n\t}\n\n\tpublic set gateway(val: TGateway) {\n\t\tif (val !== null) {\n\t\t\tthis._gateway = val;\n\t\t\tthis._gateway.init(this);\n\t\t}\n\t}\n\n  public constructor(client: TClient, gateway: TGateway = null) {\n\t\tsuper();\n\n\t\tthis.ID = generateID();\n\n\t\t// gateway must be added before client for client to access\n\t\tthis.gateway = gateway;\n\t\tthis.client = client;\n\n\t\tAbstractSession.add(this);\n  }\n\n\tpublic end(code?: number, message?: string) {\n\t\tif (this.client !== null) {\n\t\t\tthis.client.close();\n\t\t\tthis.client = null;\n\t\t}\n\n\t\tif (this.gateway !== null) {\n\t\t\tthis.gateway.close();\n\t\t\tthis.gateway = null;\n\t\t}\n\n\t\tthis.emit('end', code, message);\n\t\tAbstractSession.remove(this.ID);\n\t}\n\n\tpublic abstract get backgroundMins(): number;\n}\n"]}