{"version":3,"file":"idgenerator.js","sourceRoot":"","sources":["../../src/server/idgenerator.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,+BAA4B;AAE5B,MAAM,KAAK,GAAG,4DAA4D,CAAC;AAE3E,IAAI,IAAI,GAAG,CAAC,CAAC;AAEb,SAAS,OAAO,CAAC,IAAY,EAAE,IAAY;IAC1C,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC;AAED,IAAI,WAAW,GAAG,CAAC,SAAS,SAAS;IACpC,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,GAAG,GAAG,SAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACnD,IAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;IAC3C,IAAI,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;IAC1B,IAAI,MAAM,GAAG,SAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAEzF,OAAO,GAAG,GAAG,MAAM,CAAC;AACrB,CAAC,CAAC,EAAE,CAAC;AAEL,SAAgB,UAAU,CAAC,IAAW;IACrC,IAAI,CAAC,IAAI;QACR,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAEnB,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,IAAI,KAAK,GAAG,SAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;IACrC,IAAI,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,SAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChC,IAAI,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACjC,IAAI,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACjC,IAAI,QAAQ,GAAG,SAAG,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9C,IAAI,OAAO,GAAG,SAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAE3B,IAAI,EAAE,GAAG,GAAI,IAAK,GAAI,KAAM,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,QAAS,GAAI,OAAQ,GAAI,WAAY,EAAE,CAAC;IAEzG,IAAI,EAAE,CAAC;IAEP,IAAI,IAAI,GAAG,GAAG;QACb,IAAI,GAAG,CAAC,CAAC;IAEV,OAAO,EAAE,CAAC;AACX,CAAC;AArBD,gCAqBC;AAED,SAAgB,OAAO,CAAC,EAAU;IACjC,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAE5B,IAAI,KAAK,KAAK,IAAI,EAAE;QACnB,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;QAC9C,OAAO,IAAI,IAAI,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,GAAI,GAAG,CAAC,CAAC;KAC/E;IAED,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC;AATD,0BASC","sourcesContent":["import * as os from 'os';\nimport { pad } from './pad';\n\nconst regex = /^(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{3})\\d{3}.+$/;\n\nlet incr = 0;\n\nfunction reducer(prev: string, curr: string): any {\n\treturn +prev + curr.charCodeAt(0);\n}\n\nlet fingerprint = (function nodePrint() {\n\tlet padding = 2;\n\tlet pid = pad((process.pid).toString(36), padding);\n\tlet hostname = os.hostname().toUpperCase();\n\tlet { length } = hostname;\n\tlet hostId = pad(hostname.split('').reduce(reducer, +length + 36).toString(36), padding);\n\n\treturn pid + hostId;\n})();\n\nexport function generateID(time?: Date) {\n\tif (!time)\n\t\ttime = new Date();\n\n\tlet year = time.getFullYear();\n\tlet month = pad(time.getMonth() + 1);\n\tlet day = pad(time.getDate());\n\tlet hour = pad(time.getHours());\n\tlet min = pad(time.getMinutes());\n\tlet sec = pad(time.getSeconds());\n\tlet millisec = pad(time.getMilliseconds(), 3);\n\tlet counter = pad(incr, 3);\n\n\tlet id = `${ year }${ month }${ day }${ hour }${ min }${ sec }${ millisec }${ counter }${ fingerprint }`;\n\n\tincr++;\n\n\tif (incr > 999)\n\t\tincr = 0;\n\n\treturn id;\n}\n\nexport function parseID(id: string): Date {\n\tlet match = id.match(regex);\n\n\tif (match !== null) {\n\t\tlet [, yyyy, MM, dd, HH, mm, ss, zzz] = match;\n\t\treturn new Date(`${ yyyy }-${ MM }-${ dd }T${ HH }:${ mm }:${ ss }.${ zzz }Z`);\n\t}\n\n\tthrow new Error('Invalid ID');\n}\n"]}