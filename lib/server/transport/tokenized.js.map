{"version":3,"file":"tokenized.js","sourceRoot":"","sources":["../../../src/server/transport/tokenized.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAoD;AACpD,4CAA6C;AAK7C,wBAAgC,SAAQ,gCAAmB;IAK1D,YAAY,OAAmC;QAC5C,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;QAExD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,yBAAa,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAEY,OAAO;;;YACpB,IAAI,CAAC;gBACJ,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAE7C,MAAM,CAAC,MAAM,iBAAa,YAAC,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,EAAE,CAAC,CAAC;YAC/D,CAAC;YACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;gBAC1C,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBACzB,CAAC;YACF,CAAC;QACD,CAAC;KAAA;IAEa,QAAQ;;YACpB,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YACzB,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC;YAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;YACxD,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,IAAI,EAAC,YAAY,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC;gBAExC,MAAM,CAAC,MAAM,SAAS,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;KAAA;CACF;AA5CD,gDA4CC","sourcesContent":["import { PersistentTransport }  from './persistent';\nimport { AuthWebClient } from '../webclient';\nimport { ITokenizedTransportOptions } from '../contracts';\nimport { IWrappedToken, IAuthWebClient } from '../../shared';\nimport { AuthToken } from '../../shared/webclient/auth/token';\n\nexport class TokenizedTransport extends PersistentTransport {\n\tprivate tokenAddress: string;\n\tprivate tokenPayload: any;\n  private webClient: IAuthWebClient<AuthToken>;\n\n\tconstructor(options: ITokenizedTransportOptions) {\n    super(options);\n\n    let { tokenAddress, tokenPayload, userAgent } = options;\n\n    this.tokenAddress = tokenAddress;\n    this.tokenPayload = tokenPayload;\n    this.webClient = new AuthWebClient(userAgent);\n  }\n\n  public async connect(): Promise<void> {\n\t\ttry {\n\t\t\tlet { access_token } = await this.preflite();\n\n\t\t\treturn await super.connect(`${this.address}/${access_token}`);\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (err.name === 'ConnectivityError') {\n\t\t\t\tthis.emit('error', 'token connectivity');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.emit('error', err);\n\t\t\t}\n\t\t}\n  }\n\n  private async preflite(): Promise<IWrappedToken> {\n    let { webClient } = this;\n    let { isValid, access } = webClient.token;\n\n    if (isValid) {\n      return { token_type: 'bearer', access_token: access };\n    }\n    else {\n      let {tokenAddress, tokenPayload} = this;\n\n      return await webClient.authorize(tokenAddress, tokenPayload);\n    }\n  }\n}\n"]}