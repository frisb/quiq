{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/server/transport/base.ts"],"names":[],"mappings":";;;AAAA,gCAAgC;AAChC,mCAAsC;AACtC,qCAAiC;AACjC,mCAAgC;AAGhC,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,WAAW,CAAC,CAAC;AAEvC,MAAa,aAAc,SAAQ,qBAAY;IAK9C,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAyB;QACrD,KAAK,EAAE,CAAC;QAJH,WAAM,GAAc,IAAI,CAAC;QAM9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,aAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAC7E,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;QACzC,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,iBAAiB,OAAO,MAAM,CAAC,CAAC;gBAE5C,IAAI;oBACH,IAAI,EAAE,GAAG,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAEjE,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;wBAClB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACzB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACvB,OAAO,EAAE,CAAC;oBACX,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;wBACnB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAC5B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBACpB,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;wBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;wBACxB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;wBAE1B,MAAM,CAAC,GAAG,CAAC,CAAC;oBACb,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAY,EAAE,EAAE;wBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC3B,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;wBAChC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;iBACjB;gBACD,OAAO,GAAG,EAAE;oBACX,MAAM,CAAC,KAAK,CAAC,yBAAyB,OAAO,MAAM,CAAC,CAAC;oBAEpD,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;aACF;iBACI,IAAI,IAAI,CAAC,KAAK,KAAK,aAAK,CAAC,IAAI,EAAE;gBAClC,OAAO,EAAE,CAAC;aACX;iBACI;gBACH,MAAM,CAAC,kCAAkC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;aACzD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI;YACtB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,IAAI,CAAC,OAAe;QACzB,IAAI,IAAI,CAAC,KAAK,KAAK,aAAK,CAAC,IAAI,EAAE;YAC7B,IAAI;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;aAC3B;YACD,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;aACtC;SACF;aACI;YACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;SACzC;IACH,CAAC;CACF;AAtFD,sCAsFC","sourcesContent":["import * as WebSocket from 'ws';\nimport { EventEmitter } from 'events';\nimport { Logger } from 'writeln';\nimport { State } from './state';\nimport { IBaseTransportOptions } from '../contracts';\n\nconst logger = new Logger('Transport');\n\nexport class BaseTransport extends EventEmitter {\n\tprotected address: string;\n\tprivate socket: WebSocket = null;\n\tprivate protocol: string;\n\n\tconstructor({ address, protocol }: IBaseTransportOptions) {\n    super();\n\n    this.address = address;\n    this.protocol = protocol;\n  }\n\n  public get state(): State {\n    return this.socket === null ? State.UNINITIALIZED : this.socket.readyState;\n  }\n\n  public async connect(address = this.address): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this.socket === null) {\n        logger.info(`Connecting to ${address} ...`);\n\n        try {\n\t        let ws = new WebSocket(address || this.address, [this.protocol]);\n\n\t        ws.on('open', () => {\n\t\t        logger.info('connected');\n\t\t        this.emit('connected');\n\t\t        resolve();\n\t        });\n\n\t        ws.on('close', () => {\n\t\t        logger.info('disconnected');\n\t\t        this.emit('disconnected');\n\t\t        this.socket = null;\n\t        });\n\n\t        ws.on('error', (err) => {\n\t\t        this.emit('error', err);\n\t\t        logger.warn('error', err);\n\n\t\t        reject(err);\n\t        });\n\n\t        ws.on('message', (data: string) => {\n\t\t        let obj = JSON.parse(data);\n\t\t        logger.debug('< Received', obj);\n\t\t        this.emit('message', obj);\n\t        });\n\n\t        this.socket = ws;\n        }\n        catch (err) {\n\t        logger.error(`Connection failure to ${address} ...`);\n\n          reject(err);\n        }\n      }\n      else if (this.state === State.OPEN) {\n        resolve();\n      }\n      else {\n        reject('Socket exists but readyState is ' + this.state);\n      }\n    });\n  }\n\n  public disconnect() {\n    if (this.socket !== null)\n      this.socket.close();\n  }\n\n  public send(message: string) {\n    if (this.state === State.OPEN) {\n      try {\n\t      this.socket.send(message);\n\t      logger.info('> Sent', message);\n\t      this.emit('sent', message);\n      }\n      catch (err) {\n        logger.error(err.message, err.stack);\n      }\n    }\n    else {\n      this.emit('error', 'send connectivity');\n    }\n  }\n}"]}