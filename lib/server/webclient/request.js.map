{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../src/server/webclient/request.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,+BAA+B;AAC/B,4BAA4B;AAE5B,qCAAiC;AACjC,yCAAqE;AAErE,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,YAAY,CAAC,CAAC;AAExC,SAAgB,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAmB;IACtE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAI,kBAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAElE,IAAI,KAAK,GAAG,QAAQ,KAAK,OAAO,CAAC;QACjC,IAAI,KAAa,CAAC;QAElB,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;QAEpB,IAAI,IAAI,EAAE;YACT,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAE7B,IAAI,CAAC,OAAO;gBACX,OAAO,GAAG,EAAE,CAAC;YAEd,OAAO,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SAChE;QAED,IAAI,OAAO,GAAwB;YAClC,IAAI;YACJ,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YAClD,IAAI;YACJ,MAAM;YACN,OAAO;SACP,CAAC;QAEF,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAElC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAEjE,IAAI,GAAG,GAAU,MAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,GAAyB;YAC5E,IAAI,IAAI,GAAG,EAAE,CAAC;YAEd,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAExB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,KAAa;gBACrC,IAAI,KAAK,KAAK,IAAI;oBACjB,IAAI,IAAI,KAAK,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;gBACb,IAAI,QAAQ,GAAG;oBACd,IAAI,EAAE,GAAG,CAAC,UAAU;oBACpB,IAAI;iBACJ,CAAC;gBAEF,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAEnC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,CAAQ;YACjC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAEzB,MAAM,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,KAAK,CAAC,IAAI,KAAK,EAAE;YACrD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACjB;QAED,GAAG,CAAC,GAAG,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACJ,CAAC;AAhED,0BAgEC","sourcesContent":["import * as http from 'http';\nimport * as https from 'https';\nimport * as _ from 'lodash';\n\nimport { Logger } from 'writeln';\nimport { urlParser, IRequestOptions, IResponse } from '../../shared';\n\nconst logger = new Logger('Web Client');\n\nexport function request({ url, method, headers, body }: IRequestOptions): Promise<IResponse<string>> {\n\treturn new Promise((resolve, reject) => {\n\t\tlet { protocol, host, port, path, query }  = urlParser.parse(url);\n\n\t\tlet isSSL = protocol === 'https';\n\t\tlet sData: string;\n\n\t\tpath += query || '';\n\n\t\tif (body) {\n\t\t\tsData = JSON.stringify(body);\n\n\t\t\tif (!headers)\n\t\t\t\theaders = {};\n\n\t\t\theaders['Content-Length'] = sData ? Buffer.byteLength(sData) : 0\n\t\t}\n\n\t\tlet options: http.RequestOptions = {\n\t\t\thost,\n\t\t\tport: parseInt(port || (isSSL ? '443' : '80'), 10),\n\t\t\tpath,\n\t\t\tmethod,\n\t\t\theaders\n\t\t};\n\n\t\tlet client = isSSL ? https : http;\n\n\t\tlogger.debug('request', _.extend(options, { body: body || '' }));\n\n\t\tlet req = (<any> client).request(options, function (res: http.IncomingMessage): void {\n\t\t\tlet data = '';\n\n\t\t\tres.setEncoding('utf8');\n\n\t\t\tres.on('data', function (chunk: string) {\n\t\t\t\tif (chunk !== null)\n\t\t\t\t\tdata += chunk;\n\t\t\t});\n\n\t\t\tres.on('end', function () {\n\t\t\t\tlet response = {\n\t\t\t\t\tcode: res.statusCode,\n\t\t\t\t\tdata\n\t\t\t\t};\n\n\t\t\t\tlogger.debug('response', response);\n\n\t\t\t\tresolve(response);\n\t\t\t});\n\t\t});\n\n\t\treq.on('error', function (e: Error) {\n\t\t\tlogger.error('Error', e);\n\n\t\t\treject(e);\n\t\t});\n\n\t\tif ((method === 'POST' || method === 'PUT') && sData) {\n\t\t\treq.write(sData);\n\t\t}\n\n\t\treq.end();\n\t});\n}\n"]}