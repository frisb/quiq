{"version":3,"file":"2_useragent.js","sourceRoot":"","sources":["../../../../../src/server/middleware/global/before/2_useragent.ts"],"names":[],"mappings":";;;;;;;;AAAA,6DAAwF;AAIxF,IAAa,SAAS,GAAtB;IACQ,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAmB;QAC1D,IAAI,SAAS,GAAY,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAEnD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,+BAAS,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,aAAa,CAAC,CAAC,CAAC;YACpD,IAAI,EAAE,CAAC;QACR,CAAC;IACF,CAAC;CACD,CAAA;AAXY,SAAS;IADrB,gCAAU,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;GAC/B,SAAS,CAWrB;AAXY,8BAAS","sourcesContent":["import { Middleware, ExpressMiddlewareInterface, HttpError } from 'routing-controllers';\nimport { Request, Response, NextFunction } from 'express';\n\n@Middleware({ type: 'before', priority: 2 })\nexport class UserAgent implements ExpressMiddlewareInterface {\n\tpublic use(req: Request, res: Response, next?: NextFunction): any {\n\t\tlet userAgent = <string> req.headers['user-agent'];\n\n\t\tif (!userAgent) {\n\t\t\tnext(new HttpError(403, 'Forbidden'));\n\t\t}\n\t\telse if (userAgent.toLowerCase() !== 'libwww-perl') {\n\t\t\tnext();\n\t\t}\n\t}\n}\n"]}