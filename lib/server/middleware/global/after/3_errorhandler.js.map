{"version":3,"file":"3_errorhandler.js","sourceRoot":"","sources":["../../../../../src/server/middleware/global/after/3_errorhandler.ts"],"names":[],"mappings":";;;;;;;;AAEA,6DAAkF;AAElF,qCAAkC;AAUlC,MAAM,MAAM,GAAG,IAAI,iBAAO,CAAC,0BAA0B,CAAC,CAAC;AACvD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC;AAG1C,IAAa,YAAY,GAAzB;IACQ,KAAK,CAAC,KAAU,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB;QACvE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;QACpC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACzC,IAAI,QAAQ,GAAmB;YAC9B,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,OAAO;aACP;SACD,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACrB,MAAM,EAAE,MAAM,CAAC,iBAAiB,EAAE;YAClC,OAAO;YACP,IAAI;YACJ,KAAK;SACL,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC;YAG1B,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAC9B,CAAC;QAED,GAAG,CAAC,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;CACD,CAAA;AA1BY,YAAY;IADxB,gCAAU,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;GAC9B,YAAY,CA0BxB;AA1BY,oCAAY","sourcesContent":["// import * as errorhandler from 'errorhandler';\n\nimport { Middleware, ExpressErrorMiddlewareInterface } from 'routing-controllers';\nimport { Request, Response, NextFunction } from 'express';\nimport { Writeln } from 'writeln';\n\ninterface IErrorResponse {\n\terror: {\n\t\tcode: number;\n\t\tmessage: string;\n\t\tstack?: string;\n\t}\n}\n\nconst logger = new Writeln('Error Handler Middleware');\nconst env = process.env.NODE_ENV || 'dev';\n\n@Middleware({ type: 'after', priority: 3 })\nexport class ErrorHandler implements ExpressErrorMiddlewareInterface {\n\tpublic error(error: any, req: Request, res: Response, next: NextFunction) {\n\t\tlet { method, headers, body } = req;\n\t\tlet { httpCode, message, stack } = error;\n\t\tlet response: IErrorResponse = {\n\t\t\terror: {\n\t\t\t\tcode: httpCode,\n\t\t\t\tmessage\n\t\t\t}\n\t\t};\n\n\t\tlogger.error(message, {\n\t\t\tmethod: method.toLocaleUpperCase(),\n\t\t\theaders,\n\t\t\tbody,\n\t\t\tstack\n\t\t});\n\n\t\tif (env !== 'production') {\n\t\t\t// errorhandler()(error, req, res, next);\n\n\t\t\tresponse.error.stack = stack;\n\t\t}\n\n\t\tres.status(httpCode || 500).json(response);\n\t}\n}\n"]}