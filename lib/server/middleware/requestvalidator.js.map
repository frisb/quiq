{"version":3,"file":"requestvalidator.js","sourceRoot":"","sources":["../../../src/server/middleware/requestvalidator.ts"],"names":[],"mappings":";;;AAAA,6DAA4E;AAE5E,qCAAiC;AAEjC,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,mBAAmB,CAAC,CAAC;AAM/C,MAAM,qBAAsB,SAAQ,+BAAS;IAC5C;QACC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC3B,CAAC;CACD;AAED,SAAS,QAAQ,CAAC,IAAY,EAAE,MAAc,EAAE,UAAuB,EAAE,UAAyB;IACjG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAC,MAAM,EAAC,GAAG,UAAU,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QACvD,IAAI,IAAI,GAAW,UAAU,CAAC,CAAC,CAAC,CAAC;QAEjC,IAAI,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;YAC5C,MAAM,CAAC,KAAK,CAAC,iBAAkB,IAAK,kBAAmB,IAAK,QAAS,MAAM,CAAC,WAAW,EAAG,UAAU,EAAE,UAAU,CAAC,CAAC;YAElH,MAAM,IAAI,qBAAqB,EAAE,CAAC;SAClC;KACD;AACF,CAAC;AAED,SAAgB,eAAe,CAAC,GAAG,UAAoB;IACtD,MAAM,eAAe;QACb,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAmB;YAC1D,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;YAE9B,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAEtF,IAAI,EAAE,CAAC;QACR,CAAC;KACD;IAED,OAAO,eAAe,CAAC;AACxB,CAAC;AAZD,0CAYC;AAED,SAAgB,aAAa,CAAC,GAAG,UAAoB;IACpD,MAAM,aAAa;QACX,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAmB;YAC1D,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;YAE3B,IAAI,CAAC,IAAI,EAAE;gBACV,MAAM,CAAC,KAAK,CAAC,sBAAuB,MAAM,CAAC,WAAW,EAAG,UAAU,CAAC,CAAC;gBAErE,MAAM,IAAI,qBAAqB,EAAE,CAAC;aAClC;iBACI;gBACJ,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;aAC3C;YAED,IAAI,EAAE,CAAC;QACR,CAAC;KACD;IAED,OAAO,aAAa,CAAC;AACtB,CAAC;AAnBD,sCAmBC","sourcesContent":["import { ExpressMiddlewareInterface, HttpError } from 'routing-controllers';\nimport { Request, Response, NextFunction } from 'express';\nimport { Logger } from 'writeln';\n\nconst logger = new Logger('Request Validator');\n\ninterface ICollection {\n\t[key: string]: any;\n}\n\nclass RequestValidatorError extends HttpError {\n\tconstructor() {\n\t\tsuper(400, 'Bad Request');\n\t}\n}\n\nfunction validate(type: string, method: string, collection: ICollection, fieldNames: Array<string>) {\n\tfor (let i = 0, {length} = fieldNames; i < length; i++) {\n\t\tlet name: string = fieldNames[i];\n\n\t\tif (typeof collection[name] === 'undefined') {\n\t\t\tlogger.error(`Header param \"${ name }\" not found in ${ type } for ${ method.toUpperCase() } request`, collection);\n\n\t\t\tthrow new RequestValidatorError();\n\t\t}\n\t}\n}\n\nexport function HeaderValidator(...fieldNames: string[]): any {\n\tclass HeaderValidator implements ExpressMiddlewareInterface {\n\t\tpublic use(req: Request, res: Response, next?: NextFunction): any {\n\t\t\tlet { headers, method } = req;\n\n\t\t\tvalidate('header', method, headers, fieldNames.map((header) => header.toLowerCase()));\n\n\t\t\tnext();\n\t\t}\n\t}\n\n\treturn HeaderValidator;\n}\n\nexport function BodyValidator(...fieldNames: string[]): any {\n\tclass BodyValidator implements ExpressMiddlewareInterface {\n\t\tpublic use(req: Request, res: Response, next?: NextFunction): any {\n\t\t\tlet { body, method } = req;\n\n\t\t\tif (!body) {\n\t\t\t\tlogger.error(`Body not found for ${ method.toUpperCase() } request`);\n\n\t\t\t\tthrow new RequestValidatorError();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalidate('body', method, body, fieldNames);\n\t\t\t}\n\n\t\t\tnext();\n\t\t}\n\t}\n\n\treturn BodyValidator;\n}\n"]}