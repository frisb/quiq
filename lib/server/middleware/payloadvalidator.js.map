{"version":3,"file":"payloadvalidator.js","sourceRoot":"","sources":["../../../src/server/middleware/payloadvalidator.ts"],"names":[],"mappings":";;AAAA,6DAA4E;AAE5E,qCAAkC;AAElC,MAAM,MAAM,GAAG,IAAI,iBAAO,CAAC,mBAAmB,CAAC,CAAC;AAEhD,kBAAmB,SAAQ,+BAAS;IACnC;QACC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC3B,CAAC;CACD;AAED,0BAAiC,GAAG,UAAoB;IACvD;QACQ,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAmB;YAC1D,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;YAC3B,IAAI,OAAO,GAAY,IAAI,CAAC;YAE5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,KAAK,CAAC,sBAAuB,MAAM,CAAC,WAAW,EAAG,UAAU,CAAC,CAAC;gBAErE,OAAO,GAAG,KAAK,CAAC;YACjB,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAC,MAAM,EAAC,GAAG,UAAU,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACxD,IAAI,IAAI,GAAW,UAAU,CAAC,CAAC,CAAC,CAAC;oBAEjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,MAAM,CAAC,KAAK,CAAC,eAAgB,IAAK,8BAA+B,MAAM,CAAC,WAAW,EAAG,UAAU,EAAE,IAAI,CAAC,CAAC;wBAExG,OAAO,GAAG,KAAK,CAAC;wBAChB,KAAK,CAAC;oBACP,CAAC;gBACF,CAAC;YACF,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBACZ,MAAM,IAAI,YAAY,EAAE,CAAC;YAE1B,IAAI,EAAE,CAAC;QACR,CAAC;KACD;IAED,MAAM,CAAC,gBAAgB,CAAC;AACzB,CAAC;AAhCD,4CAgCC","sourcesContent":["import { ExpressMiddlewareInterface, HttpError } from 'routing-controllers';\nimport { Request, Response, NextFunction } from 'express';\nimport { Writeln } from 'writeln';\n\nconst logger = new Writeln('Payload Validator');\n\nclass PayloadError extends HttpError {\n\tconstructor() {\n\t\tsuper(400, 'Bad Request');\n\t}\n}\n\nexport function PayloadValidator(...fieldNames: string[]): any {\n\tclass PayloadValidator implements ExpressMiddlewareInterface {\n\t\tpublic use(req: Request, res: Response, next?: NextFunction): any {\n\t\t\tlet { body, method } = req;\n\t\t\tlet isValid: Boolean = true;\n\n\t\t\tif (!body) {\n\t\t\t\tlogger.error(`Body not found for ${ method.toUpperCase() } request`);\n\n\t\t\t\tisValid = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let i = 0, {length} = fieldNames; i < length; i++) {\n\t\t\t\t\tlet name: string = fieldNames[i];\n\n\t\t\t\t\tif (!body[name]) {\n\t\t\t\t\t\tlogger.error(`Body param \"${ name }\" not found in payload for ${ method.toUpperCase() } request`, body);\n\n\t\t\t\t\t\tisValid = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isValid)\n\t\t\t\tthrow new PayloadError();\n\n\t\t\tnext();\n\t\t}\n\t}\n\n\treturn PayloadValidator;\n}\n"]}