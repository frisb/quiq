{"version":3,"file":"tokendetector.js","sourceRoot":"","sources":["../../../src/server/middleware/tokendetector.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,4CAAuD;AAGvD,uBAA8B,OAAwB,EAAE,UAAU,GAAG,KAAK;IACzE,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,OAAO,CAAC,CAAC;IAEzC;QACc,GAAG,CAAC,GAAa,EAAE,GAAa,EAAE,IAAmB;;gBACjE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,mBAAmB,EAAE,GAAG,GAAG,CAAC;gBAC1D,IAAI,WAAW,GAAG,GAAI,QAAS,IAAK,MAAM,CAAC,SAAU,EAAE,CAAC;gBAExD,IAAI,mBAAmB,EAAE;oBACxB,IAAI,KAAK,GAAG,mBAAmB,CAAC;oBAChC,IAAI,SAAS,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBAEjE,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;oBAE1B,IAAI,EAAE,CAAC;iBACP;qBACI,IAAI,UAAU,EAAE;oBACpB,IAAI,EAAE,CAAC;iBACP;qBACI;oBACJ,MAAM,IAAI,wBAAY,EAAE,CAAC;iBACzB;YACF,CAAC;SAAA;QAAA,CAAC;KACF;IAED,OAAO,aAAa,CAAC;AACtB,CAAC;AA1BD,sCA0BC","sourcesContent":["import { ExpressMiddlewareInterface } from 'routing-controllers';\nimport { Response, NextFunction } from 'express';\nimport { Tokenizer, NoTokenError } from '../tokenizer';\nimport { IRequest, ISigningOptions } from '../contracts';\n\nexport function TokenDetector(signing: ISigningOptions, isOptional = false): any {\n\tconst tokenizer = new Tokenizer(signing);\n\n\tclass TokenDetector implements ExpressMiddlewareInterface {\n\t\tpublic async use(req: IRequest, res: Response, next?: NextFunction): Promise<void> {\n\t\t\tlet { ipv4, hostname, socket, authorizationBearer } = req;\n\t\t\tlet channelHost = `${ hostname }:${ socket.localPort }`;\n\n\t\t\tif (authorizationBearer) {\n\t\t\t\tlet token = authorizationBearer;\n\t\t\t\tlet tokenData = await tokenizer.unwrap(ipv4, channelHost, token);\n\n\t\t\t\treq.tokenData = tokenData;\n\n\t\t\t\tnext();\n\t\t\t}\n\t\t\telse if (isOptional) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new NoTokenError();\n\t\t\t}\n\t\t};\n\t}\n\n\treturn TokenDetector;\n}\n"]}