{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/server/factory/server.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,+BAA+B;AAE/B,qCAAkC;AAGlC,MAAM,MAAM,GAAG,IAAI,iBAAO,CAAC,gBAAgB,CAAC,CAAC;AAE7C,gBAAuB,GAAgB,EAAE,IAAqB,EAAE,mBAAyC;IACxG,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IAE3B,IAAI,MAAM,GAAG,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAKzG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;QACnB,MAAM,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,oCAAoC,IAAI,EAAE,CAAC,CAAC;IAChG,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,GAAU;QAEtC,OAAO,CAAC,GAAG,EAAW,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE;QACtB,WAAW,CAAC,MAAM,EAAW,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AACf,CAAC;AArBD,wBAqBC;AAKD,uBAAuB,GAAQ;IAC7B,IAAI,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAE7B,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QAEf,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,IAAI,IAAI,CAAC,EAAE;QAEb,OAAO,IAAI,CAAC;KACb;IAED,OAAO;AACT,CAAC;AAKD,iBAAiB,GAAmB,EAAE,IAAY;IAChD,IAAI,GAAG,CAAC,OAAO,KAAK,QAAQ,EAAE;QAC5B,MAAM,GAAG,CAAC;KACX;IAED,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;QAC/B,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;IAGrB,QAAQ,GAAG,CAAC,IAAI,EAAE;QAChB,KAAK,QAAQ;YACX,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;YACrD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACR,KAAK,YAAY;YACf,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;YAC1C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACR;YACE,MAAM,GAAG,CAAC;KACb;AACH,CAAC;AAMD,qBAAqB,MAAkC,EAAE,IAAY;IACnE,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAC5B,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;QAC/B,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,MAAM,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import * as http from 'http';\nimport * as https from 'https';\nimport { Application } from 'express';\nimport { Writeln } from 'writeln';\nimport ErrnoException = NodeJS.ErrnoException;\n\nconst logger = new Writeln('Server Factory');\n\nexport function create(app: Application, port: number | string, secureServerOptions?: https.ServerOptions): http.Server | https.Server {\n\tport = normalizePort(port);\n\n\tlet server = secureServerOptions ? https.createServer(secureServerOptions, app) : http.createServer(app);\n\n\t/**\n\t * Listen on provided port, on all network interfaces.\n\t */\n\tserver.listen(port, function() {\n\t\tlogger.info(`${secureServerOptions ? 'Secure ' : ''}Express server listening on port ${port}`);\n\t});\n\n\tserver.on('error', function (err: Error) {\n\n\t\tonError(err, <number> port);\n\t});\n\tserver.on('listening', function () {\n\t\tonListening(server, <number> port);\n\t});\n\n\treturn server;\n}\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort(val: any): number {\n  let port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\nfunction onError(err: ErrnoException, port: number) {\n  if (err.syscall !== 'listen') {\n    throw err;\n  }\n\n  let bind = typeof port === 'string'\n      ? 'Pipe ' + port\n      : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (err.code) {\n    case 'EACCES':\n      logger.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      logger.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw err;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening(server: http.Server | https.Server, port: number) {\n  let addr = server.address();\n  let bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n  logger.debug('Listening on ' + bind);\n}\n"]}