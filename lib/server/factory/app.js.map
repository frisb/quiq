{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../src/server/factory/app.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,mCAAmC;AACnC,6DAAkF;AAElF,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC;AAE1C,SAAgB,MAAM,CAAC,OAAkC;IACxD,IAAI,CAAC,OAAO;QACX,OAAO,GAAG,EAAE,CAAC;IAEd,IAAI,CAAC,OAAO,CAAC,WAAW;QACvB,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;IAQE,OAAO,CAAC,WAAY,CAAC,OAAO,CAAC,GAAI,SAAU,+BAA+B,CAAC,CAAC;IAGxG,OAAO,CAAC,mBAAmB,GAAG,KAAK,CAAC;IAEpC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;IAGtB,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC/B,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAEvB,IAAI,GAAG,KAAK,KAAK;QACd,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;IAE5B,OAAO,sCAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC;AA5BD,wBA4BC","sourcesContent":["import 'reflect-metadata'; // this shim is required\nimport * as express from 'express';\nimport { useExpressServer, RoutingControllersOptions } from 'routing-controllers';\n\nconst env = process.env.NODE_ENV || 'dev';\n\nexport function create(options: RoutingControllersOptions): express.Application {\n\tif (!options)\n\t\toptions = {};\n\n\tif (!options.middlewares)\n\t\toptions.middlewares = [];\n\n\t// if (!options.controllers)\n\t// \toptions.controllers = [];\n\n\t// if (!options.interceptors)\n\t// \toptions.interceptors = [];\n\n\t(<Array<string | Function>> options.middlewares).unshift(`${ __dirname }/../middleware/global/**/*.js`);\n\t// (<Array<string | Function>> options.controllers).unshift(`${ __dirname }/../channel/controllers/global**/*.js`);\n\t// (<Array<string | Function>> options.controllers).unshift(`${ __dirname }/../channel/global/interceptors/**/*.js`);\n\toptions.defaultErrorHandler = false;\n\n\tconst app = express();\n\n\t//app.set('port', port);\n\tapp.set('x-powered-by', false);\n\tapp.set('etag', false);\n\n\tif (env === 'dev')\n    app.locals.pretty = true;\n\n\treturn useExpressServer(app, options);\n}\n"]}