{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../src/server/factory/app.ts"],"names":[],"mappings":";;;AAAA,4BAA0B;AAC1B,mCAAmC;AACnC,6DAA8G;AAC9G,+EAAyE;AACzE,oEAA8D;AAC9D,0EAAoE;AACpE,oEAA8D;AAC9D,gFAA0E;AAC1E,8EAAwE;AACxE,sEAAgE;AAChE,+EAAyE;AACzE,+EAAyE;AACzE,iEAA2D;AAE3D,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC;AAE1C,SAAgB,MAAM,CAAC,OAAkC;IACxD,IAAI,CAAC,OAAO;QACX,OAAO,GAAG,EAAE,CAAC;IAEd,IAAI,CAAC,OAAO,CAAC,WAAW;QACvB,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;IAQzB,OAAO,CAAC,WAA0B,CAAC,OAAO,CAC1C,kBAAM,EACN,wBAAS,EACT,kBAAM,EACN,8BAAY,EACZ,4BAAW,EACX,oBAAO,EAEP,8BAAY,EACZ,8BAAY,EACZ,8BAAY,EACZ,gBAAK,CACL,CAAC;IAGF,OAAO,CAAC,mBAAmB,GAAG,KAAK,CAAC;IAEpC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;IAGtB,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC/B,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAEvB,IAAI,GAAG,KAAK,KAAK;QACd,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;IAE5B,OAAO,sCAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC;AAxCD,wBAwCC","sourcesContent":["import 'reflect-metadata'; // this shim is required\nimport * as express from 'express';\nimport { useExpressServer, RoutingControllersOptions, ExpressMiddlewareInterface } from 'routing-controllers';\nimport { StaticClient } from '../middleware/global/after/1_staticclient';\nimport { Morgan } from '../middleware/global/before/1_morgan';\nimport { UserAgent } from '../middleware/global/before/2_useragent';\nimport { Secure } from '../middleware/global/before/3_secure';\nimport { ServeFavicon } from '../middleware/global/before/4_servefavicon';\nimport { Compression } from '../middleware/global/before/5_compression';\nimport { Channel } from '../middleware/global/before/6_channel';\nimport { StaticPublic } from '../middleware/global/after/2_staticpublic';\nimport { ErrorHandler } from '../middleware/global/after/3_errorhandler';\nimport { Final } from '../middleware/global/after/4_final';\n\nconst env = process.env.NODE_ENV || 'dev';\n\nexport function create(options: RoutingControllersOptions): express.Application {\n\tif (!options)\n\t\toptions = {};\n\n\tif (!options.middlewares)\n\t\toptions.middlewares = [];\n\n\t// if (!options.controllers)\n\t// \toptions.controllers = [];\n\n\t// if (!options.interceptors)\n\t// \toptions.interceptors = [];\n\n\t(options.middlewares as Array<any>).unshift(\n\t\tMorgan,\n\t\tUserAgent,\n\t\tSecure,\n\t\tServeFavicon,\n\t\tCompression,\n\t\tChannel,\n\n\t\tStaticClient,\n\t\tStaticPublic,\n\t\tErrorHandler,\n\t\tFinal\n\t);\n\t// (<Array<string | Function>> options.controllers).unshift(`${ __dirname }/../channel/controllers/global**/*.js`);\n\t// (<Array<string | Function>> options.controllers).unshift(`${ __dirname }/../channel/global/interceptors/**/*.js`);\n\toptions.defaultErrorHandler = false;\n\n\tconst app = express();\n\n\t//app.set('port', port);\n\tapp.set('x-powered-by', false);\n\tapp.set('etag', false);\n\n\tif (env === 'dev')\n    app.locals.pretty = true;\n\n\treturn useExpressServer(app, options);\n}\n"]}