{"version":3,"file":"urlparser.js","sourceRoot":"","sources":["../../src/common/urlparser.ts"],"names":[],"mappings":";;AAAA,MAAM,QAAQ,GAAG,gHAAgH,CAAC;AAElI,eAAsB,GAAW;IAChC,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAEhC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,gBAAiB,GAAI,GAAG,CAAC,CAAC;IAE3C,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;IAElD,MAAM,CAAC;QACN,QAAQ;QACR,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,KAAK;KACL,CAAC;AACH,CAAC;AAfD,sBAeC","sourcesContent":["const urlRegex = /^(https?):\\/\\/([-a-zA-Z0-9@%._\\+~#=]{2,256}(?:\\.[a-z]{2,6}\\b)?)(?::(\\d+))?([-a-zA-Z0-9@:%_\\+.~#&//=]*)(\\?.+)?$/;\n\nexport function parse(url: string) {\n\tlet match = url.match(urlRegex);\n\n\tif (match === null)\n\t\tthrow new Error(`Invalid url \"${ url }\"`);\n\n\tlet [, protocol, host, port, path, query] = match;\n\n\treturn {\n\t\tprotocol,\n\t\thost,\n\t\tport,\n\t\tpath, \n\t\tquery\n\t};\n}"]}